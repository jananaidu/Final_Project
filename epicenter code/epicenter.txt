import cv2
import time
import requests
import random
import numpy as np
import onnxruntime as ort
from PIL import Image
from pathlib import Path
from collections import OrderedDict, namedtuple

# test_img = r"C:\Users\jagan\Downloads\project\four.jpg"
img = cv2.VideoCapture(r"C:\Users\janardhan\Downloads\test.mp4")
out = cv2.VideoWriter('output.avi',-1,20.0,(640,480))
# img = cv2.imread(test_img)

# print(type(img))
# cv2.imshow("hi",img)
# cv2.waitKey(40)

onnx_mld = r"C:\Users\janardhan\Downloads\last.onnx"

cuda = False
# whT = 320
# confThreshold = 0.5
# nmsThreshold = 0.3

# onx = cv2.dnn.readTensorFromONNX(onnx_mld)
#
# print(onnx_mld)


# providers = ['CUDAExecutionProvider', 'CPUExecutionProvider'] if cuda else ['CPUExecutionProvider']
providers = ['CPUExecutionProvider']
session = ort.InferenceSession(onnx_mld, providers=providers)


def letterbox(im, new_shape=(640, 640), color=(114, 114, 114), auto=True, scaleup=True, stride=32):
    # Resize and pad image while meeting stride-multiple constraints
    shape = im.shape[:2]  # current shape [height, width]
    if isinstance(new_shape, int):
        new_shape = (new_shape, new_shape)

    # Scale ratio (new / old)
    r = min(new_shape[0] / shape[0], new_shape[1] / shape[1])
    if not scaleup:  # only scale down, do not scale up (for better val mAP)
        r = min(r, 1.0)

    # Compute padding
    new_unpad = int(round(shape[1] * r)), int(round(shape[0] * r))
    dw, dh = new_shape[1] - new_unpad[0], new_shape[0] - new_unpad[1]  # wh padding

    if auto:  # minimum rectangle
        dw, dh = np.mod(dw, stride), np.mod(dh, stride)  # wh padding

    dw /= 2  # divide padding into 2 sides
    dh /= 2

    if shape[::-1] != new_unpad:  # resize
        im = cv2.resize(im, new_unpad, interpolation=cv2.INTER_LINEAR)
    top, bottom = int(round(dh - 0.1)), int(round(dh + 0.1))
    left, right = int(round(dw - 0.1)), int(round(dw + 0.1))
    im = cv2.copyMakeBorder(im, top, bottom, left, right, cv2.BORDER_CONSTANT, value=color)  # add border
    # mid = ((top+bottom)/2,(left+right)/2)
    return im, r, (dw, dh)


# names = ['person', 'bicycle', 'car', 'motorcycle', 'airplane', 'bus', 'train', 'truck', 'boat', 'traffic light',
#          'fire hydrant', 'stop sign', 'parking meter', 'bench', 'bird', 'cat', 'dog', 'horse', 'sheep', 'cow',
#          'elephant', 'bear', 'zebra', 'giraffe', 'backpack', 'umbrella', 'handbag', 'tie', 'suitcase', 'frisbee',
#          'skis', 'snowboard', 'sports ball', 'kite', 'baseball bat', 'baseball glove', 'skateboard', 'surfboard',
#          'tennis racket', 'bottle', 'wine glass', 'cup', 'fork', 'knife', 'spoon', 'bowl', 'banana', 'apple',
#          'sandwich', 'orange', 'broccoli', 'carrot', 'hot dog', 'pizza', 'donut', 'cake', 'chair', 'couch',
#          'potted plant', 'bed', 'dining table', 'toilet', 'tv', 'laptop', 'mouse', 'remote', 'keyboard', 'cell phone',
#          'microwave', 'oven', 'toaster', 'sink', 'refrigerator', 'book', 'clock', 'vase', 'scissors', 'teddy bear',
#          'hair drier', 'toothbrush']
names = ['cyclone']
colors = {name: [random.randint(0, 255) for _ in range(3)] for i, name in enumerate(names)}
# print(colors)
# ret,img = img.read()

if (img.isOpened()==False):
    print("error")
while True:
    # print(type(img))
    # try:
    img1 = img
    success, img1 = img1.read()

    if success == False:
        break



    # except Exception:
    #     print(Exception)

    # print(type(img))
    img1 = cv2.cvtColor(img1, cv2.COLOR_BGR2RGB)
    # print(img1)
    # cv2.imshow("imshow", img1)
    # cv2.waitKey(3000)

    image = img1
    image, ratio, dwdh = letterbox(image, auto=False)
    image = image.transpose((2, 0, 1))
    image = np.expand_dims(image, 0)
    image = np.ascontiguousarray(image)
    key = 0
    im = image.astype(np.float32)
    im /= 255
    # im.shape

    outname = [i.name for i in session.get_outputs()]
    # outname

    inname = [i.name for i in session.get_inputs()]
    # inname

    inp = {inname[0]: im}

    outputs = session.run(outname, inp)[0]
    # print(outputs)

    ori_images = [img1.copy()]

    for i, (batch_id, x0, y0, x1, y1, cls_id, score) in enumerate(outputs):
        image = ori_images[int(batch_id)]
        box = np.array([x0, y0, x1, y1])
        box -= np.array(dwdh * 2)
        box /= ratio
        box = box.round().astype(np.int32).tolist()
        cls_id = int(cls_id)
        score = round(float(score), 3)
        name = names[cls_id]
        color = colors[name]
        # color = (255,0,0)
        name += ' ' + str(score)
        thickness = 6
        # print(tuple(box[:2]), tuple(box[2:]))
        xb, yu = box[:2]

        # print(mid1)
        xu, yb = box[2:]
        mid1 = (xb + xu) / 2
        mid2 = (yu + yb) / 2
        cv2.rectangle(image, pt1=tuple(box[:2]), pt2=tuple(box[2:]), color=color, thickness=thickness)
        cv2.putText(image, name, (box[0], box[1] - 2), cv2.FONT_HERSHEY_SIMPLEX, 0.75, [225, 0, 0], thickness=2)
        # print(mid)
        mid = (int(mid1),int(mid2))
        print("mid vales:",mid)
        image = cv2.circle(image, mid, radius=6, color=(0, 0, 255), thickness=-1)
        key = 1
        # cv2.imwrite("hello.jpg", image)
        # cv2.imshow('Image', image)

    Image.fromarray(ori_images[0])
    frame = cv2.flip(image, 0)
    out.write(frame)
    # image = cv2.cvtColor(image,cv2.COLOR_BGR2RGB)
    cv2.imshow("image", image)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
# After the loop release the cap object
img.release()
out.release()
# Destroy all the windows
cv2.destroyAllWindows()
    # if key == 1:
    #     image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)
    #     cv2.imshow("image", image)
    #     key = 0
    # else:
    #     img1 = cv2.cvtColor(img1, cv2.COLOR_RGB2BGR)
    #     cv2.imshow("image", img1)
    # cv2.waitKey(1)
    # cv2.waitKey(0)
# img.release()
# while True:
#     ret, frame = img.read()
#
#     cv2.imshow("frame", frame)

# cv2.imshow("test",img)
# cv2.waitkey(0)

# vid = cv2.VideoCapture(0)
# vid = img
# while (True):
#
#     # Capture the video frame
#     # by frame
#     ret, frame = vid.read()
#
#     # Display the resulting frame
#     cv2.imshow('frame', frame)
#
#     # the 'q' button is set as the
#     # quitting button you may use any
#     # desired button of your choice
#     if cv2.waitKey(1) & 0xFF == ord('q'):
#         break
#
# # After the loop release the cap object
# vid.release()
# # Destroy all the windows
# cv2.destroyAllWindows()